// This file is automatically generated by bindgen. DO NOT EDIT.

// Some libkis classes depend on QtGlobal typedefs so we just include it in every header for convenience
#include <QtGlobal>
// Contains common Qt includes and libkis forward declarations
#include "libkis.h"
#include <QObject>



class Krita : public QObject
{
public:
    Document* activeDocument() const;
    void setActiveDocument(Document* value);
    bool batchmode() const;
    void setBatchmode(bool value);
    QList<QAction*> actions() const;
    QAction* action(const QString& name) const;
    QList<Document*> documents() const;
    QList<QDockWidget*> dockers() const;
    QStringList filters() const;
    Filter* filter(const QString& name) const;
    QStringList colorModels() const;
    QStringList colorDepths(const QString& colorModel) const;
    QStringList filterStrategies() const;
    QStringList profiles(const QString& colorModel, const QString& colorDepth) const;
    bool addProfile(const QString& profilePath);
    Notifier* notifier() const;
    QString version() const;
    QList<View*> views() const;
    Window* activeWindow() const;
    QList<Window*> windows() const;
    QMap<QString, Resource*> resources(QString& type) const;
    QStringList recentDocuments() const;
    Document* createDocument(int width, int height, const QString& name, const QString& colorModel, const QString& colorDepth, const QString& profile, double resolution);
    Document* openDocument(const QString& filename);
    Window* openWindow();
    void addExtension(Extension* extension);
    QList<Extension*> extensions();
    void addDockWidgetFactory(DockWidgetFactoryBase* factory);
    void writeSetting(const QString& group, const QString& name, const QString& value);
    QString readSetting(const QString& group, const QString& name, const QString& defaultValue);
    QIcon icon(QString& iconName) const;
    Krita* instance();
    QObject* fromVariant(const QVariant& v);
    QString krita_i18n(const QString& text);
    QString krita_i18nc(const QString& context, const QString& text);
    QString getAppDataLocation();



}

