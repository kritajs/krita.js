from cxxheaderparser.simple import ParsedData
from Class import Class

INDENT = "    "

# ==================================================================================

def Template(
    includes: str,
    forward_decls: str,
    classes: str,
) -> str:
    content: list[str] = []
    if includes != "":
        content.append(includes)
    if forward_decls != "":
        content.append(forward_decls)
    if classes != "":
        content.append(classes)
    return f"""// This file is automatically generated by bindgen. DO NOT EDIT.

// Some libkis classes depend on QtGlobal typedefs so we just include it in every header for convenience
#include <QtGlobal>
// Contains common Qt includes and libkis forward declarations
#include "libkis.h"
{includes}

// Instead of determining which forward declarations we need on a per-file basis, just forward declare
// everything we might need.
class ColorizeMask;
class DockPosition;
class FilterMask;
class KisImageSP;
class KisNodeSP;
class ManagedColor;
class Palette;
class QDockWidget;
class QMainWindow;
class SelectionMask;
class Swatch;
class TransformMask;
class TransparencyMask;
{forward_decls}

{classes}"""

# ==================================================================================

def generate_header(data: ParsedData) -> str:
    # Keep any existing forward declarations
    forward_decls: set[str] = set()
    for forward_decl in data.namespace.forward_decls:
        forward_decls.add(forward_decl.typename.format())

    # Parse classes
    classes: list[str] = []
    base_class_includes: set[str] = set()
    for c in data.namespace.classes:
        (output, _base_class_includes) = Class(c)
        base_class_includes = _base_class_includes
        classes.append(output)

    # Format includes. Note that we only add includes for base classes.
    # Everything else can be forward declared.
    includes: set[str] = set()
    for include in base_class_includes:
        # Use angle brackets for Qt includes
        if include.startswith("Q"):
            includes.add(f"#include <{include}>")
        else:
            includes.add(f"#include \"{include}.h\"")

    return Template(
        "\n".join(includes),
        "\n".join(map(lambda name: f"{name};", forward_decls)),
        "\n".join(classes)
    )
